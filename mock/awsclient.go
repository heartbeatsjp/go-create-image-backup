// Code generated by MockGen. DO NOT EDIT.
// Source: aws.go

// Package mock_main is a generated GoMock package.
package mock

import (
	"context"
	"reflect"

	"github.com/aws/aws-sdk-go/service/ec2"
	"github.com/golang/mock/gomock"
)

// MockAWS is a mock of AWS interface
type MockAWS struct {
	ctrl     *gomock.Controller
	recorder *MockAWSMockRecorder
}

// MockAWSMockRecorder is the mock recorder for MockAWS
type MockAWSMockRecorder struct {
	mock *MockAWS
}

// NewMockAWS creates a new mock instance
func NewMockAWS(ctrl *gomock.Controller) *MockAWS {
	mock := &MockAWS{ctrl: ctrl}
	mock.recorder = &MockAWSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAWS) EXPECT() *MockAWSMockRecorder {
	return m.recorder
}

// GetRegion mocks base method
func (m *MockAWS) GetRegion() (string, error) {
	ret := m.ctrl.Call(m, "GetRegion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegion indicates an expected call of GetRegion
func (mr *MockAWSMockRecorder) GetRegion() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegion", reflect.TypeOf((*MockAWS)(nil).GetRegion))
}

// GetInstanceID mocks base method
func (m *MockAWS) GetInstanceID() (string, error) {
	ret := m.ctrl.Call(m, "GetInstanceID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceID indicates an expected call of GetInstanceID
func (mr *MockAWSMockRecorder) GetInstanceID() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceID", reflect.TypeOf((*MockAWS)(nil).GetInstanceID))
}

// GetInstanceName mocks base method
func (m *MockAWS) GetInstanceName(ctx context.Context, instanceID string) (string, error) {
	ret := m.ctrl.Call(m, "GetInstanceName", ctx, instanceID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceName indicates an expected call of GetInstanceName
func (mr *MockAWSMockRecorder) GetInstanceName(ctx, instanceID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceName", reflect.TypeOf((*MockAWS)(nil).GetInstanceName), ctx, instanceID)
}

// CreateImage mocks base method
func (m *MockAWS) CreateImage(ctx context.Context, instanceID, name, now string) (string, error) {
	ret := m.ctrl.Call(m, "CreateImage", ctx, instanceID, name, now)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage
func (mr *MockAWSMockRecorder) CreateImage(ctx, instanceID, name, now interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockAWS)(nil).CreateImage), ctx, instanceID, name, now)
}

// CreateTags mocks base method
func (m *MockAWS) CreateTags(ctx context.Context, resourceID string, tags []*ec2.Tag) error {
	ret := m.ctrl.Call(m, "CreateTags", ctx, resourceID, tags)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTags indicates an expected call of CreateTags
func (mr *MockAWSMockRecorder) CreateTags(ctx, resourceID, tags interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTags", reflect.TypeOf((*MockAWS)(nil).CreateTags), ctx, resourceID, tags)
}

// GetImages mocks base method
func (m *MockAWS) GetImages(ctx context.Context, name, service string) ([]*ec2.Image, error) {
	ret := m.ctrl.Call(m, "GetImages", ctx, name, service)
	ret0, _ := ret[0].([]*ec2.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages
func (mr *MockAWSMockRecorder) GetImages(ctx, name, service interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockAWS)(nil).GetImages), ctx, name, service)
}

// GetImage mocks base method
func (m *MockAWS) GetImage(ctx context.Context, imageID string) (*ec2.Image, error) {
	ret := m.ctrl.Call(m, "GetImage", ctx, imageID)
	ret0, _ := ret[0].(*ec2.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage
func (mr *MockAWSMockRecorder) GetImage(ctx, imageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockAWS)(nil).GetImage), ctx, imageID)
}

// GetSnapshots mocks base method
func (m *MockAWS) GetSnapshots(ctx context.Context, imageID string) ([]string, error) {
	ret := m.ctrl.Call(m, "GetSnapshots", ctx, imageID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSnapshots indicates an expected call of GetSnapshots
func (mr *MockAWSMockRecorder) GetSnapshots(ctx, imageID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSnapshots", reflect.TypeOf((*MockAWS)(nil).GetSnapshots), ctx, imageID)
}

// DeregisterImages mocks base method
func (m *MockAWS) DeregisterImages(ctx context.Context, images []*ec2.Image) error {
	ret := m.ctrl.Call(m, "DeregisterImages", ctx, images)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterImages indicates an expected call of DeregisterImages
func (mr *MockAWSMockRecorder) DeregisterImages(ctx, images interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterImages", reflect.TypeOf((*MockAWS)(nil).DeregisterImages), ctx, images)
}
